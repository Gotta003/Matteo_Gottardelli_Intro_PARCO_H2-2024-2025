#!/bin/bash
# Job name
#PBS -N transpose
# Output files
#PBS -o ./transpose.o
#PBS -e ./transpose.e
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=1:00:00
# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=64:ompthreads=64:mem=128Gb
# Modules for C
module load gcc91
gcc() {
    gcc-9.1.0 "$@"
}
gcc --version
module load mpich-3.2.1--gcc-9.1.0

# Functions
function execution {
    for size in {4..12}; do
        case $2 in 
            2|4)
                if [ $5 -eq 0 ]; then
                    for threads in 1 2 4 8 16 32 64; do
                        mpirun -np $threads ./transpose $1 $2 $size $3 $4 $5
                    done
                else
                    for threads in 1 2 4 8 16; do
                       mpirun -np $threads ./transpose $1 $2 $size $3 $4 $5
                    done
                fi
            ;;
        esac
    done
}
function mode2 {
    mpicc -O2 functions.c transpose.c -o transpose -lm
    execution MPISG $1 $2 $3 $4
}

function mode4 {
    mpicc -O2 functions.c transpose.c -o transpose -lm
    execution MPIBLOCKOPT $1 $2 $3 $4
}

NODES=$(cat $PBS_NODEFILE)
echo The running nodes are $NODES

NODES=$(sort -u $PBS_NODEFILE)
echo The running nodes are $NODES

for NODE in $NODES; do
    echo "Node: $NODE"
    ssh $NODE "lscpu"
done

# Select the working directory
cd /home/matteo.gottardelli/Project_2/MPI_Matrix_Transposition

original="results"
copy_dir="$original"
n=1
while [[ -d $copy_dir ]]; do
    copy_dir="${original}_$n"
    ((n++))
done
mkdir -p $copy_dir
samples=25 
for mode in {1..4}; do 
    # The code should be compiled before submitting the job
        case $mode in
            1) 
                mode2 2 1 $samples 0
            ;;
            2)
                mode2 $mode 1 $samples 1
            ;;
            4)
                mode4 $mode 1 $samples 0
            ;;
        esac
done
mv results*.csv $copy_dir
mv times*.csv $copy_dir
exit
